{
  "summary": "Checking basic fields and matchers",
  "operationId": "matchers",
  "x-contracts": [
    {
      "contractId": "contract1",
      "name": "Should verify basic fileds and matchers",
      "headers": {
        "headerFoo": "should be overridden by definition in parameters",
        "headerFoo2": "should be overridden by definition in parameters"
      }
    }
  ],
  "parameters": [
    {
      "name": "limit",
      "in": "query",
      "required": false,
      "schema": {
        "type": "integer",
        "format": "int32"
      },
      "x-contracts": [
        {
          "contractId": "contract1",
          "value": 10
        }
      ]
    },
    {
      "name": "offset",
      "in": "query",
      "required": false,
      "schema": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "int32"
        }
      },
      "x-contracts": [
        {
          "contractId": "contract1",
          "value": [
            20
          ]
        }
      ]
    },
    {
      "name": "filter",
      "in": "query",
      "required": false,
      "schema": {
        "type": "string"
      },
      "x-contracts": [
        {
          "contractId": "contract1",
          "value": "email",
          "matchers": [
            {
              "type": "matching",
              "value": "(email|name)"
            },
            {
              "type": "equal_to",
              "value": "email"
            }
          ]
        }
      ]
    },
    {
      "name": "sort",
      "in": "query",
      "required": false,
      "schema": {
        "type": "string"
      },
      "x-contracts": [
        {
          "contractId": "contract1",
          "value": "name"
        }
      ]
    },
    {
      "name": "search",
      "in": "query",
      "required": false,
      "schema": {
        "type": "string",
        "pattern": "^[0-9]{2}$"
      },
      "x-contracts": [
        {
          "contractId": "contract1",
          "value": 55
        }
      ]
    },
    {
      "name": "age",
      "in": "query",
      "required": false,
      "schema": {
        "type": "integer",
        "format": "int32"
      },
      "x-contracts": [
        {
          "contractId": "contract1",
          "value": 99
        }
      ]
    },
    {
      "name": "name",
      "in": "query",
      "required": false,
      "schema": {
        "type": "string"
      },
      "x-contracts": [
        {
          "contractId": "contract1",
          "value": "John.Doe"
        }
      ]
    },
    {
      "name": "email",
      "in": "query",
      "required": false,
      "schema": {
        "type": "string"
      },
      "x-contracts": [
        {
          "contractId": "contract1",
          "value": "bob@email.com"
        }
      ]
    },
    {
      "name": "cookieFoo",
      "in": "cookie",
      "required": false,
      "schema": {
        "type": "string"
      },
      "x-contracts": [
        {
          "contractId": "contract1",
          "value": 1
        }
      ]
    },
    {
      "name": "cookieBar",
      "in": "cookie",
      "required": false,
      "schema": {
        "type": "string"
      },
      "x-contracts": [
        {
          "contractId": "contract1",
          "value": "cookie-bar-value"
        }
      ]
    },
    {
      "name": "headerFoo",
      "in": "header",
      "required": false,
      "schema": {
        "type": "string"
      },
      "x-contracts": [
        {
          "contractId": "contract1",
          "value": "barTest",
          "matchers": [
            {
              "regex": "bar.*",
              "predefined": "only_alpha_unicode",
              "command": "thing($it)",
              "regexType": "as_string"
            },
            {
              "regex": "barTest",
              "predefined": "only_alpha_unicode",
              "command": "thing($it)",
              "regexType": "as_string"
            }
          ]
        }
      ]
    }
  ],
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "type": "string"
        }
      }
    },
    "x-contracts": [
      {
        "contractId": "contract1",
        "queryParameters": [
          {
            "key": "limit",
            "value": 20
          },
          {
            "key": "offset",
            "value": 20
          }
        ],
        "body": {
          "duck": 123,
          "alpha": "abc",
          "number": 123,
          "aBoolean": true,
          "date": "2017-01-01",
          "dateTime": "2017-01-01T01:23:45",
          "time": "01:02:34",
          "valueWithoutAMatcher": "foo",
          "valueWithTypeMatch": "string",
          "key": {
            "complex.key": "foo"
          },
          "nullValue": null,
          "valueWithMin": [
            1,
            2,
            3
          ],
          "valueWithMax": [
            1,
            2,
            3
          ],
          "valueWithMinMax": [
            1,
            2,
            3
          ],
          "valueWithMinEmpty": [],
          "valueWithMaxEmpty": []
        },
        "matchers": {
          "url": {
            "regex": "/check-matchers/[0-9]"
          },
          "queryParameters": [
            {
              "key": "limit",
              "type": "equal_to",
              "value": 20
            },
            {
              "key": "offset",
              "type": "containing",
              "value": 20
            },
            {
              "key": "sort",
              "type": "equal_to",
              "value": "name"
            },
            {
              "key": "search",
              "type": "not_matching",
              "value": "^[0-9]{2}$"
            },
            {
              "key": "age",
              "type": "not_matching",
              "value": "^\\w*$"
            },
            {
              "key": "name",
              "type": "matching",
              "value": "John.*"
            },
            {
              "key": "hello",
              "type": "absent"
            }
          ],
          "cookies": [
            {
              "key": "cookieFoo",
              "regex": "[0-9]"
            },
            {
              "key": "cookieBar",
              "command": "equals($it)"
            }
          ],
          "headers": [
            {
              "key": "Content-Type",
              "regex": "application/json.*"
            }
          ],
          "body": [
            {
              "path": "$.duck",
              "type": "by_regex",
              "value": "[0-9]{3}"
            },
            {
              "path": "$.duck",
              "type": "by_equality"
            },
            {
              "path": "$.alpha",
              "type": "by_regex",
              "predefined": "only_alpha_unicode"
            },
            {
              "path": "$.alpha",
              "type": "by_equality"
            },
            {
              "path": "$.number",
              "type": "by_regex",
              "predefined": "number"
            },
            {
              "path": "$.aBoolean",
              "type": "by_regex",
              "predefined": "any_boolean"
            },
            {
              "path": "$.date",
              "type": "by_date"
            },
            {
              "path": "$.dateTime",
              "type": "by_timestamp"
            },
            {
              "path": "$.time",
              "type": "by_time"
            },
            {
              "path": "$.['key'].['complex.key']",
              "type": "by_equality"
            },
            {
              "path": "$.nullvalue",
              "type": "by_null"
            },
            {
              "path": "$.valueWithMin",
              "type": "by_type",
              "minOccurrence": 1
            },
            {
              "path": "$.valueWithMax",
              "type": "by_type",
              "maxOccurrence": 3
            },
            {
              "path": "$.valueWithMinMax",
              "type": "by_type",
              "minOccurrence": 1,
              "maxOccurrence": 3
            }
          ]
        }
      }
    ]
  },
  "responses": {
    "200": {
      "description": "Successful response",
      "content": {
        "application/json": {
          "schema": {
            "type": "string"
          }
        }
      },
      "x-contracts": [
        {
          "contractId": "contract1",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "duck": 123,
            "alpha": "abc",
            "number": 123,
            "aBoolean": true,
            "date": "2017-01-01",
            "dateTime": "2017-01-01T01:23:45",
            "time": "01:02:34",
            "valueWithoutAMatcher": "foo",
            "valueWithTypeMatch": "string",
            "valueWithMin": [
              1,
              2,
              3
            ],
            "valueWithMax": [
              1,
              2,
              3
            ],
            "valueWithMinMax": [
              1,
              2,
              3
            ],
            "valueWithMinEmpty": [],
            "valueWithMaxEmpty": [],
            "key": {
              "complex.key": "foo"
            },
            "nulValue": null
          },
          "matchers": {
            "headers": [
              {
                "key": "Content-Type",
                "regex": "application/json.*"
              }
            ],
            "body": [
              {
                "path": "$.duck",
                "type": "by_regex",
                "value": "[0-9]{3}"
              },
              {
                "path": "$.duck",
                "type": "by_equality"
              },
              {
                "path": "$.alpha",
                "type": "by_regex",
                "predefined": "only_alpha_unicode"
              },
              {
                "path": "$.alpha",
                "type": "by_equality"
              },
              {
                "path": "$.number",
                "type": "by_regex",
                "predefined": "number"
              },
              {
                "path": "$.aBoolean",
                "type": "by_regex",
                "predefined": "any_boolean"
              },
              {
                "path": "$.date",
                "type": "by_date"
              },
              {
                "path": "$.dateTime",
                "type": "by_timestamp"
              },
              {
                "path": "$.time",
                "type": "by_time"
              },
              {
                "path": "$.valueWithTypeMatch",
                "type": "by_type"
              },
              {
                "path": "$.valueWithMin",
                "type": "by_type",
                "minOccurrence": 1
              },
              {
                "path": "$.valueWithMax",
                "type": "by_type",
                "maxOccurrence": 3
              },
              {
                "path": "$.valueWithMinMax",
                "type": "by_type",
                "minOccurrence": 1,
                "maxOccurrence": 3
              },
              {
                "path": "$.valueWithMinEmpty",
                "type": "by_type",
                "minOccurrence": 0
              },
              {
                "path": "$.valueWithMaxEmpty",
                "type": "by_type",
                "maxOccurrence": 0
              },
              {
                "path": "$.duck",
                "type": "by_command",
                "value": "assertThatValueIsANumber($it)"
              },
              {
                "path": "$.nullValue",
                "type": "by_null",
                "value": null
              }
            ]
          }
        }
      ]
    }
  }
}